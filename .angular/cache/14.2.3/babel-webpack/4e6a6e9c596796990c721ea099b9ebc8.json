{"ast":null,"code":"import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nclass BlockScrollStrategy {\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach() {}\n  /** Blocks page-level scroll while the attached overlay is open. */\n\n\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n  /** Unblocks page-level scroll while the attached overlay is open. */\n\n\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nclass CloseScrollStrategy {\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = () => {\n      this.disable();\n\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables the closing of the attached overlay on scroll. */\n\n\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n  /** Disables the closing the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nclass NoopScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  attach() {}\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nclass RepositionScrollStrategy {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables repositioning of the attached overlay on scroll. */\n\n\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize(); // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n\n\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n  /** Disables repositioning of the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nclass ScrollStrategyOptions {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /** Do nothing on scroll. */\n\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n\n\n    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /** Block scrolling. */\n\n\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n\n\n    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n\n    this._document = document;\n  }\n\n}\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\nScrollStrategyOptions.ctorParameters = () => [{\n  type: ScrollDispatcher\n}, {\n  type: ViewportRuler\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nclass OverlayConfig {\n  constructor(config) {\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the overlay has a backdrop. */\n\n    this.hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.disposeOnNavigation = false;\n\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config);\n\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nclass ConnectionPositionPair {\n  constructor(origin, overlay,\n  /** Offset along the X axis. */\n  offsetX,\n  /** Offset along the Y axis. */\n  offsetY,\n  /** Class(es) to be applied to the panel while this position is active. */\n  panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nclass ScrollingVisibility {}\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nclass ConnectedOverlayPositionChange {\n  constructor(\n  /** The position used as a result of this change. */\n  connectionPair,\n  /** @docs-private */\n  scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n\n}\n\nConnectedOverlayPositionChange.ctorParameters = () => [{\n  type: ConnectionPositionPair\n}, {\n  type: ScrollingVisibility,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass BaseOverlayDispatcher {\n  constructor(document) {\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this.detach();\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    this._attachedOverlays.push(overlayRef);\n  }\n  /** Remove an overlay from the list of attached overlay refs. */\n\n\n  remove(overlayRef) {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    } // Remove the global listener once there are no more overlays.\n\n\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n}\n\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n  return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function BaseOverlayDispatcher_Factory() {\n    return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT));\n  },\n  token: BaseOverlayDispatcher,\n  providedIn: \"root\"\n});\n\nBaseOverlayDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(document) {\n    super(document);\n    /** Keyboard event listener that will be attached to the body. */\n\n    this._keydownListener = event => {\n      const overlays = this._attachedOverlays;\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    super.add(overlayRef); // Lazily start dispatcher once first overlay is added\n\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n\n      this._isAttached = true;\n    }\n  }\n  /** Detaches the global keyboard event listener. */\n\n\n  detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n\n      this._isAttached = false;\n    }\n  }\n\n}\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\nOverlayKeyboardDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  constructor(document, _platform) {\n    super(document);\n    this._platform = _platform;\n    this._cursorStyleIsSet = false;\n    /** Click event listener that will be attached to the body propagate phase. */\n\n    this._clickListener = event => {\n      // Get the target through the `composedPath` if possible to account for shadow DOM.\n      const target = event.composedPath ? event.composedPath()[0] : event.target; // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n\n      const overlays = this._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        const overlayRef = overlays[i];\n\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          continue;\n        } // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n\n\n        if (overlayRef.overlayElement.contains(target)) {\n          break;\n        }\n\n        overlayRef._outsidePointerEvents.next(event);\n      }\n    };\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    super.add(overlayRef); // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n\n    if (!this._isAttached) {\n      const body = this._document.body;\n      body.addEventListener('click', this._clickListener, true);\n      body.addEventListener('auxclick', this._clickListener, true);\n      body.addEventListener('contextmenu', this._clickListener, true); // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n  /** Detaches the global keyboard event listener. */\n\n\n  detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n\n      this._isAttached = false;\n    }\n  }\n\n}\n\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n  return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayOutsideClickDispatcher_Factory() {\n    return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: OverlayOutsideClickDispatcher,\n  providedIn: \"root\"\n});\n\nOverlayOutsideClickDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\n\n\nconst isTestEnvironment = typeof window !== 'undefined' && !!window && !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\n\nclass OverlayContainer {\n  constructor(document, _platform) {\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    const container = this._containerElement;\n\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n\n\n  _createContainer() {\n    const containerClass = 'cdk-overlay-container';\n\n    if (this._platform.isBrowser || isTestEnvironment) {\n      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`); // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n\n\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n      }\n    }\n\n    const container = this._document.createElement('div');\n\n    container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n    if (isTestEnvironment) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nOverlayContainer.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = event => this._backdropClick.next(event);\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  get overlayElement() {\n    return this._pane;\n  }\n  /** The overlay's backdrop HTML element. */\n\n\n  get backdropElement() {\n    return this._backdropElement;\n  }\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n\n\n  get hostElement() {\n    return this._host;\n  }\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n\n\n  attach(portal) {\n    let attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.\n\n\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n\n    this._updateElementSize();\n\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    } // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n\n\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    }); // Enable pointer events for the overlay pane element.\n\n\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    } // Only emit the `attachments` event once all other setup is done.\n\n\n    this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    return attachResult;\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n\n\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n    this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n    this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n    this._detachContentWhenStable();\n\n    this._locationChanges.unsubscribe();\n\n    this._outsideClickDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n  /** Cleans up the overlay from the DOM. */\n\n\n  dispose() {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n\n    this.detachBackdrop();\n\n    this._locationChanges.unsubscribe();\n\n    this._keyboardDispatcher.remove(this);\n\n    this._portalOutlet.dispose();\n\n    this._attachments.complete();\n\n    this._backdropClick.complete();\n\n    this._keydownEvents.complete();\n\n    this._outsidePointerEvents.complete();\n\n    this._outsideClickDispatcher.remove(this);\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n\n      this._host = null;\n    }\n\n    this._previousHostParent = this._pane = null;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n  /** Whether the overlay has attached content. */\n\n\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n  /** Gets an observable that emits when the backdrop has been clicked. */\n\n\n  backdropClick() {\n    return this._backdropClick;\n  }\n  /** Gets an observable that emits when the overlay has been attached. */\n\n\n  attachments() {\n    return this._attachments;\n  }\n  /** Gets an observable that emits when the overlay has been detached. */\n\n\n  detachments() {\n    return this._detachments;\n  }\n  /** Gets an observable of keydown events targeted to this overlay. */\n\n\n  keydownEvents() {\n    return this._keydownEvents;\n  }\n  /** Gets an observable of pointer events targeted outside this overlay. */\n\n\n  outsidePointerEvents() {\n    return this._outsidePointerEvents;\n  }\n  /** Gets the current overlay configuration, which is immutable. */\n\n\n  getConfig() {\n    return this._config;\n  }\n  /** Updates the position of the overlay based on the position strategy. */\n\n\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n  /** Switches to a new position strategy and updates the overlay position. */\n\n\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n  /** Update the size properties of the overlay. */\n\n\n  updateSize(sizeConfig) {\n    this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n    this._updateElementSize();\n  }\n  /** Sets the LTR/RTL direction for the overlay. */\n\n\n  setDirection(dir) {\n    this._config = Object.assign(Object.assign({}, this._config), {\n      direction: dir\n    });\n\n    this._updateElementDirection();\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n\n\n  getDirection() {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n  /** Switches to a new scroll strategy. */\n\n\n  updateScrollStrategy(strategy) {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n  /** Updates the text direction of the overlay panel. */\n\n\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n  /** Updates the size of the overlay element based on the overlay config. */\n\n\n  _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n  /** Toggles the pointer events for the overlay pane element. */\n\n\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n  /** Attaches a backdrop for this overlay. */\n\n\n  _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    } // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n\n\n    this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n\n\n    this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n\n\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n  /** Detaches the backdrop (if any) associated with the overlay. */\n\n\n  detachBackdrop() {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId;\n\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      } // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n\n\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n    }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n\n\n    backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n  /** Toggles a single CSS class or an array of classes on an element. */\n\n\n  _toggleClasses(element, cssClasses, isAdd) {\n    const classList = element.classList;\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n  /** Detaches the overlay content next time the zone stabilizes. */\n\n\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable.pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n\n            this._previousHostParent.removeChild(this._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n  /** Disposes of a scroll strategy. */\n\n\n  _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nclass FlexibleConnectedPositionStrategy {\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /** Attaches this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n\n\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    } // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n\n\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n\n    this._resetOverlayElementStyles();\n\n    this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n\n\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n    const flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n    let fallback; // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n\n\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n\n        this._applyPosition(pos, originPoint);\n\n        return;\n      } // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n\n\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      } // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n\n\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n\n\n    if (flexibleFits.length) {\n      let bestFit = null;\n      let bestScore = -1;\n\n      for (const fit of flexibleFits) {\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n\n      this._applyPosition(bestFit.position, bestFit.origin);\n\n      return;\n    } // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n\n\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n\n      return;\n    } // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n\n\n    this._applyPosition(fallback.position, fallback.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n\n    this._resizeSubscription.unsubscribe();\n  }\n  /** Cleanup after the element gets destroyed. */\n\n\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    } // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n\n\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n\n    this._positionChanges.complete();\n\n    this._overlayRef = this._boundingBox = null;\n    this._isDisposed = true;\n  }\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  reapplyLastPosition() {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._scrollables = scrollables;\n    return this;\n  }\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n    if (positions.indexOf(this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n\n\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n\n\n  setOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n\n\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n\n\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n\n\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n\n\n  _getOriginPoint(originRect, pos) {\n    let x;\n\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y;\n\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n\n\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX;\n\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY;\n\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    } // The (x, y) coordinates of the overlay.\n\n\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n\n\n  _getOverlayFit(point, rawOverlayRect, viewport, position) {\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {\n      x,\n      y\n    } = point;\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    } // How much the overlay would overflow at this position, on each side.\n\n\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n\n\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n\n    return false;\n  }\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n\n\n  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    } // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n\n\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n    let pushX = 0;\n    let pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n\n\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n\n    this._setOverlayElementStyles(originPoint, position);\n\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    } // Save the last connected position in case the position needs to be re-calculated.\n\n\n    this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n    let xOrigin;\n    let yOrigin = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n\n\n  _calculateBoundingBoxRect(origin, position) {\n    const viewport = this._viewportRect;\n\n    const isRtl = this._isRtl();\n\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right,\n      width,\n      height\n    };\n  }\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n\n\n  _setBoundingBoxStyles(origin, position) {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n\n\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {};\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(this._boundingBox.style, styles);\n  }\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n\n  _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: ''\n    });\n  }\n  /** Sets positioning styles to the overlay element. */\n\n\n  _setOverlayElementStyles(originPoint, position) {\n    const styles = {};\n\n    const hasExactPosition = this._hasExactPosition();\n\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n\n\n    let transformString = '';\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {\n      top: '',\n      bottom: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n\n\n    overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {\n      left: '',\n      right: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n\n\n    let horizontalStyleProperty;\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    } // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n\n\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n\n\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n\n    const overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n\n\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n\n\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n  /** Whether the we're dealing with an RTL context */\n\n\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /** Determines whether the overlay uses exact or flexible positioning. */\n\n\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n  /** Retrieves the offset of a position along the x or y axis. */\n\n\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n  /** Validates that the current position match the expected values. */\n\n\n  _validatePositions() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n\n      this._appliedPanelClasses = [];\n    }\n  }\n  /** Returns the ClientRect of the current origin. */\n\n\n  _getOriginRect() {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    } // Check for Element so SVG elements are also supported.\n\n\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\n\n\nfunction getRoundedBoundingClientRect(clientRect) {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\n\n\nclass ConnectedPositionStrategy {\n  constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /** Attach this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    this._overlayRef = overlayRef;\n\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n  /** Disposes all resources used by the position strategy. */\n\n\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n  /** @docs-private */\n\n\n  detach() {\n    this._positionStrategy.detach();\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n\n\n  apply() {\n    this._positionStrategy.apply();\n  }\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  recalculateLastPosition() {\n    this._positionStrategy.reapplyLastPosition();\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n\n\n  withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n    this._preferredPositions.push(position);\n\n    this._positionStrategy.withPositions(this._preferredPositions);\n\n    return this;\n  }\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n\n\n  withDirection(dir) {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n\n\n  withOffsetX(offset) {\n    this._positionStrategy.withDefaultOffsetX(offset);\n\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n\n\n  withOffsetY(offset) {\n    this._positionStrategy.withDefaultOffsetY(offset);\n\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked) {\n    this._positionStrategy.withLockedPosition(isLocked);\n\n    return this;\n  }\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions.slice();\n\n    this._positionStrategy.withPositions(this._preferredPositions);\n\n    return this;\n  }\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n\n\n  setOrigin(origin) {\n    this._positionStrategy.setOrigin(origin);\n\n    return this;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\n\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n\n  attach(overlayRef) {\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n\n\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n\n\n  left(value = '') {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n\n\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n\n\n  right(value = '') {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n\n\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n\n\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n\n\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n\n    const config = this._overlayRef.getConfig();\n\n    const {\n      width,\n      height,\n      maxWidth,\n      maxHeight\n    } = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n\n\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef = null;\n    this._isDisposed = true;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Builder for overlay position strategy. */\n\n\nclass OverlayPositionBuilder {\n  constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   */\n\n\n  global() {\n    return new GlobalPositionStrategy();\n  }\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  connectedTo(elementRef, originPos, overlayPos) {\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n\n\n  flexibleConnectedTo(origin) {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n\n}\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\nOverlayPositionBuilder.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}, {\n  type: OverlayContainer\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Next overlay unique ID. */\n\n\nlet nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nclass Overlay {\n  constructor(\n  /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n  }\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n\n\n  create(config) {\n    const host = this._createHostElement();\n\n    const pane = this._createPaneElement(host);\n\n    const portalOutlet = this._createPortalOutlet(pane);\n\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n  }\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n\n\n  position() {\n    return this._positionBuilder;\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(host) {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n\n\n  _createHostElement() {\n    const host = this._document.createElement('div');\n\n    this._overlayContainer.getContainerElement().appendChild(host);\n\n    return host;\n  }\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n\n\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n  }\n\n}\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher));\n};\n\nOverlay.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n\nOverlay.ctorParameters = () => [{\n  type: ScrollStrategyOptions\n}, {\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: OverlayPositionBuilder\n}, {\n  type: OverlayKeyboardDispatcher\n}, {\n  type: Injector\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Directionality\n}, {\n  type: Location\n}, {\n  type: OverlayOutsideClickDispatcher\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nclass CdkOverlayOrigin {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n\nCdkOverlayOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nclass CdkConnectedOverlay {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /** The offset in pixels for the overlay connection point on the x-axis */\n\n\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /** The offset in pixels for the overlay connection point on the y-axis */\n\n\n  get offsetY() {\n    return this._offsetY;\n  }\n\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /** Whether or not the overlay should attach a backdrop. */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /** Whether or not the overlay should be locked when scrolling. */\n\n\n  get lockPosition() {\n    return this._lockPosition;\n  }\n\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  get push() {\n    return this._push;\n  }\n\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  }\n  /** The associated overlay reference. */\n\n\n  get overlayRef() {\n    return this._overlayRef;\n  }\n  /** The element's layout direction. */\n\n\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n\n    this._detachSubscription.unsubscribe();\n\n    this._backdropSubscription.unsubscribe();\n\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n  /** Creates an overlay */\n\n\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe(event => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe(event => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n  /** Builds the overlay config based on the directive's inputs */\n\n\n  _buildConfig() {\n    const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n\n  _updatePositionStrategy(positionStrategy) {\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined\n    }));\n    return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n  }\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n\n\n  _createPositionStrategy() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n\n    return strategy;\n  }\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n\n\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges.pipe(takeWhile(() => this.positionChange.observers.length > 0)).subscribe(position => {\n        this.positionChange.emit(position);\n\n        if (this.positionChange.observers.length === 0) {\n          this._positionSubscription.unsubscribe();\n        }\n      });\n    }\n  }\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n\n    this._positionSubscription.unsubscribe();\n  }\n\n}\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n    transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\",\n    overlayOutsideClick: \"overlayOutsideClick\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkConnectedOverlay.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: TemplateRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  positionStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositionStrategy']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  disableClose: [{\n    type: Input,\n    args: ['cdkConnectedOverlayDisableClose']\n  }],\n  transformOriginSelector: [{\n    type: Input,\n    args: ['cdkConnectedOverlayTransformOriginOn']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }],\n  overlayOutsideClick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }]\n  });\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass OverlayModule {}\n\nOverlayModule.ɵfac = function OverlayModule_Factory(t) {\n  return new (t || OverlayModule)();\n};\n\nOverlayModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function () {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nclass FullscreenOverlayContainer extends OverlayContainer {\n  constructor(_document, platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  _createContainer() {\n    super._createContainer();\n\n    this._adjustParentForFullscreenChange();\n\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  _addFullscreenChangeListener(fn) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n\n      this._fullScreenListener = fn;\n    }\n  }\n\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      const _document = this._document;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n\n\n  getFullscreenElement() {\n    const _document = this._document;\n    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n  }\n\n}\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({\n  factory: function FullscreenOverlayContainer_Factory() {\n    return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: FullscreenOverlayContainer,\n  providedIn: \"root\"\n});\n\nFullscreenOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };","map":{"version":3,"names":["ScrollDispatcher","ViewportRuler","ScrollingModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","CdkScrollable","DOCUMENT","Location","ɵɵdefineInjectable","ɵɵinject","NgZone","Injectable","Inject","Optional","ElementRef","ApplicationRef","ComponentFactoryResolver","Injector","InjectionToken","Directive","EventEmitter","TemplateRef","ViewContainerRef","Input","Output","NgModule","coerceCssPixelValue","coerceArray","coerceBooleanProperty","supportsScrollBehavior","Platform","Directionality","BidiModule","DomPortalOutlet","TemplatePortal","PortalModule","Subject","Subscription","merge","take","takeUntil","takeWhile","ESCAPE","hasModifierKey","scrollBehaviorSupported","BlockScrollStrategy","constructor","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","attach","enable","_canBeEnabled","root","documentElement","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","body","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","remove","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","Error","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","hasAttached","run","detach","overlayRef","ngDevMode","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","parentRects","ScrollStrategyOptions","noop","close","config","block","reposition","ɵfac","ScrollStrategyOptions_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","ɵsetClassMetadata","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","value","validateHorizontalPosition","BaseOverlayDispatcher","_attachedOverlays","ngOnDestroy","push","index","indexOf","splice","length","BaseOverlayDispatcher_Factory","OverlayKeyboardDispatcher","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","OverlayKeyboardDispatcher_Factory","OverlayOutsideClickDispatcher","_platform","_cursorStyleIsSet","_clickListener","target","composedPath","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","OverlayOutsideClickDispatcher_Factory","isTestEnvironment","__karma__","jasmine","OverlayContainer","container","_containerElement","parentNode","removeChild","getContainerElement","_createContainer","containerClass","isBrowser","oppositePlatformContainers","querySelectorAll","createElement","setAttribute","appendChild","OverlayContainer_Factory","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","backdropElement","hostElement","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","outsidePointerEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","assign","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","forEach","cssClass","subscription","children","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","positions","_validatePositions","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","scrollables","withPositions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","_pushOverlayOnScreen","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","isBoundedByRightViewportEdge","isBoundedByLeftViewportEdge","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","trim","virtualKeyboardOffset","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","nativeElement","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","Element","destination","source","hasOwnProperty","input","units","split","parseFloat","clientRect","floor","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFallbackPosition","onPositionChange","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","global","elementRef","flexibleConnectedTo","OverlayPositionBuilder_Factory","nextUniqueId","Overlay","scrollStrategies","_componentFactoryResolver","_positionBuilder","_injector","_directionality","create","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","_appRef","get","Overlay_Factory","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkOverlayOrigin_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","exportAs","CdkConnectedOverlay","_overlay","templateRef","viewContainerRef","scrollStrategyFactory","_dir","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_position","_updatePositionStrategy","lockPosition","ngOnChanges","changes","_attachOverlay","_detachOverlay","_createOverlay","_buildConfig","emit","keyCode","preventDefault","_createPositionStrategy","currentPosition","transformOriginSelector","CdkConnectedOverlay_Factory","inputs","outputs","features","ɵɵNgOnChangesFeature","propDecorators","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","OverlayModule","OverlayModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","FullscreenOverlayContainer","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","fullscreenElement","getFullscreenElement","fn","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","FullscreenOverlayContainer_Factory","ɵangular_material_src_cdk_overlay_overlay_a","ɵangular_material_src_cdk_overlay_overlay_b","ɵangular_material_src_cdk_overlay_overlay_c","ɵangular_material_src_cdk_overlay_overlay_d"],"sources":["/home/ytp-user-003/Documents/Backup/kohab/kohabbb/kohab-web-ui/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js"],"sourcesContent":["import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        if (this._platform.isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵfac = function OverlayModule_Factory(t) { return new (t || OverlayModule)(); };\nOverlayModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}