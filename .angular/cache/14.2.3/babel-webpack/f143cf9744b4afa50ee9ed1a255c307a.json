{"ast":null,"code":"import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n  constructor(_elementRef, _tree, tabIndex) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    this._elementRef.nativeElement.classList.add('mat-tree-node');\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\n\nMatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\n\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  constructor(_elementRef, _tree, _differs, tabIndex) {\n    super(_elementRef, _tree, _differs);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    this._elementRef.nativeElement.classList.add('mat-nested-tree-node');\n  }\n  /** Whether the node is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Tabindex for the node. */\n\n\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  disabled: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n}\n\nMatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\n\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n\nMatTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TREE_NODE_OUTLET_NODE]\n  }, {\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nclass MatTree extends CdkTree {}\n\nMatTree.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\n\nMatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        // The 'cdk-tree' class needs to be included here because classes set in the host in the\n        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n        // to be set in the host because:\n        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n        // class from it.\n        // the ElementRef is not available in the constructor so the class can't be applied directly\n        // without a breaking constructor change.\n        'class': 'mat-tree cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\n\n\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  get recursive() {\n    return this._recursive;\n  }\n\n  set recursive(value) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._recursive = coerceBooleanProperty(value);\n  }\n\n}\n\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\n\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nclass MatTreeModule {}\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CdkTreeModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CdkTreeModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n\n\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nclass MatTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData = []) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  connect(collectionViewer) {\n    const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n  }\n\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => {\n      return this.data;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["CdkTreeNode","CdkTree","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTreeNodeToggle","CdkTreeModule","Directive","ElementRef","Attribute","Input","IterableDiffers","ViewContainerRef","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","ɵngcc0","ɵngcc1","_MatTreeNodeMixinBase","MatTreeNode","constructor","_elementRef","_tree","tabIndex","Number","nativeElement","classList","add","ngOnInit","ngDoCheck","ngOnDestroy","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","inputs","role","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ctorParameters","String","decorators","args","ngDevMode","ɵsetClassMetadata","selector","providers","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","propDecorators","MatNestedTreeNode","_differs","_disabled","value","_tabIndex","ngAfterContentInit","MatNestedTreeNode_Factory","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","undefined","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_nodeOutlet","first","hostAttrs","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","static","host","None","changeDetection","Default","MatTreeNodeToggle","recursive","_recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource","arguments"],"sources":["/home/ytp-user-003/Documents/Backup/kohab/kohabbb/kohab-web-ui/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js"],"sourcesContent":["import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('mat-tree-node');\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Tabindex for the node. */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                    // to be set in the host because:\n                    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                    // class from it.\n                    // the ElementRef is not available in the constructor so the class can't be applied directly\n                    // without a breaking constructor change.\n                    'class': 'mat-tree cdk-tree',\n                    'role': 'tree'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"] }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() { return this._recursive; }\n    set recursive(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CdkTreeModule, MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    get data() { return this._data.value; }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() { return this._data.value; }\n    set data(value) { this._data.next(value); }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => {\n            return this.data;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}