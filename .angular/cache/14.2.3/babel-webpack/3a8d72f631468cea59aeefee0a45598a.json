{"ast":null,"code":"/**\n * @license Angular v11.0.9\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ÉµparseCookieValue } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nclass HttpHandler {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nclass HttpBackend {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nclass HttpHeaders {\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n\n            if (this.headers.has(key)) {\n              this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        Object.keys(headers).forEach(name => {\n          let values = headers[name];\n          const key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n\n\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n\n\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n\n\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n\n\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n\n      this.lazyInit = null;\n\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n\n        if (typeof value === 'string') {\n          value = [value];\n        }\n\n        if (value.length === 0) {\n          return;\n        }\n\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n\n      case 'd':\n        const toDelete = update.value;\n\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n\n          if (!existing) {\n            return;\n          }\n\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n\n        break;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n\n\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n\n\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n\n\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n\n}\n\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n\n  if (rawParams.length > 0) {\n    const params = rawParams.split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nclass HttpParams {\n  constructor(options = {}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key];\n        this.map.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n\n\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n\n\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n\n\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n\n\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n\n\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n\n\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    }) // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(update.value);\n            this.map.set(update.param, base);\n            break;\n\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(update.value);\n\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nclass HttpRequest {\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    let options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    } // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n\n\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || typeof this.body === 'string') {\n      return this.body;\n    } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    } // Fall back on toString() for everything else.\n\n\n    return this.body.toString();\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n\n\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    } // FormData bodies rely on the browser's content type assignment.\n\n\n    if (isFormData(this.body)) {\n      return null;\n    } // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n\n\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n    if (isArrayBuffer(this.body)) {\n      return null;\n    } // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n\n\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    } // `HttpUrlEncodedParams` has its own content-type.\n\n\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    } // Arrays, objects, and numbers will be encoded as JSON.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'number' || Array.isArray(this.body)) {\n      return 'application/json';\n    } // No type could be inferred.\n\n\n    return null;\n  }\n\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n\n    const body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params; // Check whether the caller has asked to add headers.\n\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    } // Check whether the caller has asked to set params.\n\n\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType;\n\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\n\n\nclass HttpResponseBase {\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nclass HttpErrorResponse extends HttpResponseBase {\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    this.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n\n    this.error = init.error || null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\n\n\nclass HttpClient {\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n\n\n  request(first, url, options = {}) {\n    let req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      let headers = undefined;\n\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      } // Sort out parameters.\n\n\n      let params = undefined;\n\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({\n            fromObject: options.params\n          });\n        }\n      } // Construct the request.\n\n\n      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n        headers,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials\n      });\n    } // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n    const events$ = of(req).pipe(concatMap(req => this.handler.handle(req))); // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    } // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n\n\n    const res$ = events$.pipe(filter(event => event instanceof HttpResponse)); // Decide which stream to return.\n\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n\n              return res.body;\n            }));\n\n          case 'blob':\n            return res$.pipe(map(res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n\n              return res.body;\n            }));\n\n          case 'text':\n            return res$.pipe(map(res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n\n              return res.body;\n            }));\n\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(res => res.body));\n        }\n\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n\n\n  delete(url, options = {}) {\n    return this.request('DELETE', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  get(url, options = {}) {\n    return this.request('GET', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  head(url, options = {}) {\n    return this.request('HEAD', url, options);\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n\n\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilites of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n\n\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n\n}\n\nHttpClient.Éµfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(Éµngcc0.ÉµÉµinject(HttpHandler));\n};\n\nHttpClient.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.Éµfac\n});\n\nHttpClient.ctorParameters = () => [{\n  type: HttpHandler\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\n\n\nclass HttpInterceptorHandler {\n  constructor(next, interceptor) {\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n\n  handle(req) {\n    return this.interceptor.intercept(req, this.next);\n  }\n\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n\nclass NoopInterceptor {\n  intercept(req, next) {\n    return next.handle(req);\n  }\n\n}\n\nNoopInterceptor.Éµfac = function NoopInterceptor_Factory(t) {\n  return new (t || NoopInterceptor)();\n};\n\nNoopInterceptor.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: NoopInterceptor,\n  factory: NoopInterceptor.Éµfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NoopInterceptor, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nlet nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nclass JsonpCallbackContext {}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n\n\nclass JsonpClientBackend {\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n\n\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n\n\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    } // Everything else happens inside the Observable boundary.\n\n\n    return new Observable(observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`); // Construct the <script> tag and point it at the URL.\n\n      const node = this.document.createElement('script');\n      node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n\n      let body = null; // Whether the response callback has been called.\n\n      let finished = false; // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n\n      let cancelled = false; // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n\n      this.callbackMap[callback] = data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.\n\n        if (cancelled) {\n          return;\n        } // Set state to indicate data was received.\n\n\n        body = data;\n        finished = true;\n      }; // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        } // Remove the response callback from the callbackMap (window object in the\n        // browser).\n\n\n        delete this.callbackMap[callback];\n      }; // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n\n\n      const onLoad = event => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        } // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n\n\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup(); // Check whether the response callback has run.\n\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK)\n            }));\n            return;\n          } // Success. body either contains the response body or null if none was\n          // returned.\n\n\n          observer.next(new HttpResponse({\n            body,\n            status: 200,\n            statusText: 'OK',\n            url\n          })); // Complete the stream, the response is over.\n\n          observer.complete();\n        });\n      }; // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n\n\n      const onError = error => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n\n        cleanup(); // Wrap the error in a HttpErrorResponse.\n\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      }; // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n\n\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node); // The request has now been successfully sent.\n\n      observer.next({\n        type: HttpEventType.Sent\n      }); // Cancellation handler.\n\n      return () => {\n        // Track the cancellation so event listeners won't do anything even if already scheduled.\n        cancelled = true; // Remove the event listeners so they won't run if the events later fire.\n\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError); // And finally, clean up the page.\n\n        cleanup();\n      };\n    });\n  }\n\n}\n\nJsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(Éµngcc0.ÉµÉµinject(JsonpCallbackContext), Éµngcc0.ÉµÉµinject(DOCUMENT));\n};\n\nJsonpClientBackend.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.Éµfac\n});\n\nJsonpClientBackend.ctorParameters = () => [{\n  type: JsonpCallbackContext\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n\n\nclass JsonpInterceptor {\n  constructor(jsonp) {\n    this.jsonp = jsonp;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n\n\n  intercept(req, next) {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle(req);\n    } // Fall through for normal HTTP requests.\n\n\n    return next.handle(req);\n  }\n\n}\n\nJsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(Éµngcc0.ÉµÉµinject(JsonpClientBackend));\n};\n\nJsonpInterceptor.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.Éµfac\n});\n\nJsonpInterceptor.ctorParameters = () => [{\n  type: JsonpClientBackend\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpClientBackend\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\n\n\nclass XhrFactory {}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\n\n\nclass BrowserXhr {\n  constructor() {}\n\n  build() {\n    return new XMLHttpRequest();\n  }\n\n}\n\nBrowserXhr.Éµfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.Éµfac\n});\n\nBrowserXhr.ctorParameters = () => [];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n\n\nclass HttpXhrBackend {\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n\n\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    } // Everything happens on Observable subscription.\n\n\n    return new Observable(observer => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      } // Add all the requested headers.\n\n\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(','))); // Add an Accept header if one isn't present already.\n\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      } // Auto-detect the Content-Type header if one isn't present already.\n\n\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      } // Set the responseType if one was requested.\n\n\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n\n        xhr.responseType = responseType !== 'json' ? responseType : 'text';\n      } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n      const reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n\n      let headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n\n      const partialFromXhr = () => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        } // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n\n\n        const status = xhr.status === 1223 ? 204 : xhr.status;\n        const statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n\n        const url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n        headerResponse = new HttpHeaderResponse({\n          headers,\n          status,\n          statusText,\n          url\n        });\n        return headerResponse;\n      }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n      // First up is the load event, which represents a response being fully available.\n\n\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {\n          headers,\n          status,\n          statusText,\n          url\n        } = partialFromXhr(); // The body will be read out if present.\n\n        let body = null;\n\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n        } // Normalize another potential bug (this one comes from CORS).\n\n\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        } // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n\n\n        let ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false; // The parse error contains the text of the body that failed to parse.\n\n              body = {\n                error,\n                text: body\n              };\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          })); // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          }));\n        }\n      }; // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n\n\n      const onError = error => {\n        const {\n          url\n        } = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined\n        });\n        observer.error(res);\n      }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n\n\n      let sentHeaders = false; // The download progress event handler, which is only registered if\n      // progress events are enabled.\n\n      const onDownProgress = event => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        } // Start building the download progress event to deliver on the response\n        // event stream.\n\n\n        let progressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded\n        }; // Set the total number of bytes in the event if it's available.\n\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        } // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n\n\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        } // Finally, fire the event.\n\n\n        observer.next(progressEvent);\n      }; // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n\n\n      const onUpProgress = event => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded\n        }; // If the total number of bytes being uploaded is available, include\n        // it.\n\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        } // Send the event.\n\n\n        observer.next(progress);\n      }; // By default, register for load and error events.\n\n\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError); // Progress events are only enabled if requested.\n\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      } // Fire the request, and notify the event stream that it was fired.\n\n\n      xhr.send(reqBody);\n      observer.next({\n        type: HttpEventType.Sent\n      }); // This is the return from the Observable function, which is the\n      // request cancellation handler.\n\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('load', onLoad);\n\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        } // Finally, abort the in-flight request.\n\n\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n\n}\n\nHttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(Éµngcc0.ÉµÉµinject(XhrFactory));\n};\n\nHttpXhrBackend.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.Éµfac\n});\n\nHttpXhrBackend.ctorParameters = () => [{\n  type: XhrFactory\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: XhrFactory\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nclass HttpXsrfTokenExtractor {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nclass HttpXsrfCookieExtractor {\n  constructor(doc, platform, cookieName) {\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n\n    this.parseCount = 0;\n  }\n\n  getToken() {\n    if (this.platform === 'server') {\n      return null;\n    }\n\n    const cookieString = this.doc.cookie || '';\n\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n\n    return this.lastToken;\n  }\n\n}\n\nHttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(Éµngcc0.ÉµÉµinject(DOCUMENT), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(XSRF_COOKIE_NAME));\n};\n\nHttpXsrfCookieExtractor.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.Éµfac\n});\n\nHttpXsrfCookieExtractor.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [XSRF_COOKIE_NAME]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nclass HttpXsrfInterceptor {\n  constructor(tokenService, headerName) {\n    this.tokenService = tokenService;\n    this.headerName = headerName;\n  }\n\n  intercept(req, next) {\n    const lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n\n    const token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.\n\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({\n        headers: req.headers.set(this.headerName, token)\n      });\n    }\n\n    return next.handle(req);\n  }\n\n}\n\nHttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(Éµngcc0.ÉµÉµinject(HttpXsrfTokenExtractor), Éµngcc0.ÉµÉµinject(XSRF_HEADER_NAME));\n};\n\nHttpXsrfInterceptor.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.Éµfac\n});\n\nHttpXsrfInterceptor.ctorParameters = () => [{\n  type: HttpXsrfTokenExtractor\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [XSRF_HEADER_NAME]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpXsrfTokenExtractor\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_HEADER_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n\n\nclass HttpInterceptingHandler {\n  constructor(backend, injector) {\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n\n  handle(req) {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n\n    return this.chain.handle(req);\n  }\n\n}\n\nHttpInterceptingHandler.Éµfac = function HttpInterceptingHandler_Factory(t) {\n  return new (t || HttpInterceptingHandler)(Éµngcc0.ÉµÉµinject(HttpBackend), Éµngcc0.ÉµÉµinject(Éµngcc0.Injector));\n};\n\nHttpInterceptingHandler.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n  token: HttpInterceptingHandler,\n  factory: HttpInterceptingHandler.Éµfac\n});\n\nHttpInterceptingHandler.ctorParameters = () => [{\n  type: HttpBackend\n}, {\n  type: Injector\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpInterceptingHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: Éµngcc0.Injector\n    }];\n  }, null);\n})();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\n\n\nfunction interceptingHandler(backend, interceptors = []) {\n  if (!interceptors) {\n    return backend;\n  }\n\n  return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nclass HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [{\n        provide: HttpXsrfInterceptor,\n        useClass: NoopInterceptor\n      }]\n    };\n  }\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n\n\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [options.cookieName ? {\n        provide: XSRF_COOKIE_NAME,\n        useValue: options.cookieName\n      } : [], options.headerName ? {\n        provide: XSRF_HEADER_NAME,\n        useValue: options.headerName\n      } : []]\n    };\n  }\n\n}\n\nHttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\n\nHttpClientXsrfModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, {\n    provide: XSRF_COOKIE_NAME,\n    useValue: 'XSRF-TOKEN'\n  }, {\n    provide: XSRF_HEADER_NAME,\n    useValue: 'X-XSRF-TOKEN'\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, {\n        provide: XSRF_COOKIE_NAME,\n        useValue: 'XSRF-TOKEN'\n      }, {\n        provide: XSRF_HEADER_NAME,\n        useValue: 'X-XSRF-TOKEN'\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nclass HttpClientModule {}\n\nHttpClientModule.Éµfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\n\nHttpClientModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  providers: [HttpClient, {\n    provide: HttpHandler,\n    useClass: HttpInterceptingHandler\n  }, HttpXhrBackend, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, BrowserXhr, {\n    provide: XhrFactory,\n    useExisting: BrowserXhr\n  }],\n  imports: [HttpClientXsrfModule.withOptions({\n    cookieName: 'XSRF-TOKEN',\n    headerName: 'X-XSRF-TOKEN'\n  })]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Optional configuration for XSRF protection.\n       */\n      imports: [HttpClientXsrfModule.withOptions({\n        cookieName: 'XSRF-TOKEN',\n        headerName: 'X-XSRF-TOKEN'\n      })],\n\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [HttpClient, {\n        provide: HttpHandler,\n        useClass: HttpInterceptingHandler\n      }, HttpXhrBackend, {\n        provide: HttpBackend,\n        useExisting: HttpXhrBackend\n      }, BrowserXhr, {\n        provide: XhrFactory,\n        useExisting: BrowserXhr\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HttpClientModule, {\n    imports: [HttpClientXsrfModule]\n  });\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nclass HttpClientJsonpModule {}\n\nHttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\n\nHttpClientJsonpModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  providers: [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JsonpInterceptor,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [JsonpClientBackend, {\n        provide: JsonpCallbackContext,\n        useFactory: jsonpCallbackContext\n      }, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: JsonpInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler, NoopInterceptor as Éµangular_packages_common_http_http_a, JsonpCallbackContext as Éµangular_packages_common_http_http_b, jsonpCallbackContext as Éµangular_packages_common_http_http_c, BrowserXhr as Éµangular_packages_common_http_http_d, XSRF_COOKIE_NAME as Éµangular_packages_common_http_http_e, XSRF_HEADER_NAME as Éµangular_packages_common_http_http_f, HttpXsrfCookieExtractor as Éµangular_packages_common_http_http_g, HttpXsrfInterceptor as Éµangular_packages_common_http_http_h };","map":{"version":3,"names":["Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","DOCUMENT","ÉµparseCookieValue","Éµngcc0","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","param","eqIdx","val","list","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","toString","eKey","join","idx","splice","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","Éµfac","HttpClient_Factory","t","ÉµÉµinject","Éµprov","ÉµÉµdefineInjectable","token","factory","ctorParameters","ngDevMode","ÉµsetClassMetadata","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","decorators","args","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","build","XMLHttpRequest","BrowserXhr_Factory","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","HttpClientXsrfModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","ngJitMode","ÉµÉµsetNgModuleScope","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","ÉµHttpInterceptingHandler","Éµangular_packages_common_http_http_a","Éµangular_packages_common_http_http_b","Éµangular_packages_common_http_http_c","Éµangular_packages_common_http_http_d","Éµangular_packages_common_http_http_e","Éµangular_packages_common_http_http_f","Éµangular_packages_common_http_http_g","Éµangular_packages_common_http_http_h"],"sources":["/home/ytp-user-003/Documents/Backup/kohab/kohabbb/kohab-web-ui/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js"],"sourcesContent":["/**\n * @license Angular v11.0.9\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ÉµparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as Éµngcc0 from '@angular/core';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.Éµfac = function HttpClient_Factory(t) { return new (t || HttpClient)(Éµngcc0.ÉµÉµinject(HttpHandler)); };\nHttpClient.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: HttpClient, factory: HttpClient.Éµfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.Éµfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.Éµfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(Éµngcc0.ÉµÉµinject(JsonpCallbackContext), Éµngcc0.ÉµÉµinject(DOCUMENT)); };\nJsonpClientBackend.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.Éµfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(Éµngcc0.ÉµÉµinject(JsonpClientBackend)); };\nJsonpInterceptor.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.Éµfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    build() {\n        return (new XMLHttpRequest());\n    }\n}\nBrowserXhr.Éµfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.Éµfac });\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(Éµngcc0.ÉµÉµinject(XhrFactory)); };\nHttpXhrBackend.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.Éµfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(Éµngcc0.ÉµÉµinject(DOCUMENT), Éµngcc0.ÉµÉµinject(PLATFORM_ID), Éµngcc0.ÉµÉµinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.Éµfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(Éµngcc0.ÉµÉµinject(HttpXsrfTokenExtractor), Éµngcc0.ÉµÉµinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.Éµfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.Éµfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(Éµngcc0.ÉµÉµinject(HttpBackend), Éµngcc0.ÉµÉµinject(Éµngcc0.Injector)); };\nHttpInterceptingHandler.Éµprov = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.Éµfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: Éµngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\nHttpClientXsrfModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.Éµfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\nHttpClientModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: HttpClientModule });\nHttpClientModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [HttpClientXsrfModule.withOptions({\n            cookieName: 'XSRF-TOKEN',\n            headerName: 'X-XSRF-TOKEN'\n        })] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\nHttpClientJsonpModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ÉµHttpInterceptingHandler, NoopInterceptor as Éµangular_packages_common_http_http_a, JsonpCallbackContext as Éµangular_packages_common_http_http_b, jsonpCallbackContext as Éµangular_packages_common_http_http_c, BrowserXhr as Éµangular_packages_common_http_http_d, XSRF_COOKIE_NAME as Éµangular_packages_common_http_http_e, XSRF_HEADER_NAME as Éµangular_packages_common_http_http_f, HttpXsrfCookieExtractor as Éµangular_packages_common_http_http_g, HttpXsrfInterceptor as Éµangular_packages_common_http_http_h };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}