{"ast":null,"code":"import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nclass MatTooltip {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions,\n  /** @breaking-change 11.0.0 _document argument to become required. */\n  _document) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    /** The default delay in ms before showing the tooltip after show is called */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     */\n\n    this._handleKeydown = event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._ngZone.run(() => this.hide(0));\n      }\n    };\n\n    this._scrollStrategy = scrollStrategy;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /** Disables the display of the tooltip. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The message to be displayed in the tooltip */\n\n\n  get message() {\n    return this._message;\n  }\n\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n    this._message = value != null ? String(value).trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._updateTooltipMessage();\n\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n\n    this._setupPointerEnterEventsIfNeeded();\n\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n\n\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._tooltipInstance = null;\n    } // Clean up the event listeners set in the constructor\n\n\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n\n    this._passiveListeners.length = 0;\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._setTooltipClass(this._tooltipClass);\n\n    this._updateTooltipMessage();\n\n    this._tooltipInstance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /** Shows/hides the tooltip */\n\n\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n\n\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n\n\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n\n\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n\n\n  _updatePosition() {\n    const position = this._overlayRef.getConfig().positionStrategy;\n\n    const origin = this._getOrigin();\n\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n\n\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n\n\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n\n\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n\n\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n\n\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', () => {\n        this._setupPointerExitEventsIfNeeded();\n\n        this.show();\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      this._passiveListeners.push(['touchstart', () => {\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n      }]);\n    }\n\n    this._addListeners(this._passiveListeners);\n  }\n\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n\n    this._addListeners(exitListeners);\n\n    this._passiveListeners.push(...exitListeners);\n  }\n\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n\n\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n      const doc = this._document || document;\n      const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      } // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n}\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  touchGestures: [{\n    type: Input,\n    args: ['matTooltipTouchGestures']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nclass TooltipComponent {\n  constructor(_changeDetectorRef, _breakpointObserver) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /** Property watched by the animation framework to show or hide the tooltip */\n\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n\n    this._closeOnInteraction = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n\n    this._onHide = new Subject();\n    /** Stream that emits whether the user has a handset-sized display.  */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n\n\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null; // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n\n\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null; // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n      this._markForCheck();\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n\n\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event) {\n    const toState = event.toState;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n\n\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n\n\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n}\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      let tmp_0_0;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        '(body:auxclick)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatTooltipModule {}\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Optional","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","runOutsideAngular","nativeElement","addEventListener","value","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","disabled","_setupPointerEnterEventsIfNeeded","message","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","pipe","subscribe","origin","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","doc","document","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","MatTooltip_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","exportAs","ctorParameters","undefined","decorators","args","propDecorators","ɵsetClassMetadata","selector","host","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵlistener","TooltipComponent_click_HostBindingHandler","ɵɵresolveBody","TooltipComponent_auxclick_HostBindingHandler","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","TooltipComponent_Template_div_animation_state_done_0_listener","$event","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","NgClass","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ytp-user-003/Documents/Backup/kohab/kohabbb/kohab-web-ui/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js"],"sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n    /** @breaking-change 11.0.0 _document argument to become required. */\n    _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    this._tooltipInstance.show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        const position = this._overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign(Object.assign({}, origin.main), overlay.main),\n            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n            const doc = this._document || document;\n            const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-tooltip-component', template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matTooltipAnimations.tooltipState], host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    '(body:auxclick)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                }, styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule, MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}