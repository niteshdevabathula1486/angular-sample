{"ast":null,"code":"import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nclass BaseTreeControl {\n  constructor() {\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n\n\n  toggle(dataNode) {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n  /** Expands one single data node. */\n\n\n  expand(dataNode) {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n  /** Collapses one single data node. */\n\n\n  collapse(dataNode) {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n\n\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n  /** Toggles a subtree rooted at `node` recursively. */\n\n\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /** Collapse all dataNodes in the tree. */\n\n\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /** Expands a subtree rooted at given data node recursively. */\n\n\n  expandDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  /** Collapses a subtree rooted at given data node recursively. */\n\n\n  collapseDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  _trackByValue(value) {\n    return this.trackBy ? this.trackBy(value) : value;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n\n\nclass FlatTreeControl extends BaseTreeControl {\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(getLevel, isExpandable, options) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.options = options;\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n\n\n  getDescendants(dataNode) {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n\n\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n\n\nclass NestedTreeControl extends BaseTreeControl {\n  /** Construct with nested tree function getChildren. */\n  constructor(getChildren, options) {\n    super();\n    this.getChildren = getChildren;\n    this.options = options;\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n\n\n  expandAll() {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n  }\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n\n\n  getDescendants(dataNode) {\n    const descendants = [];\n\n    this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n    return descendants.splice(1);\n  }\n  /** A helper function to get descendants recursively. */\n\n\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n        for (const child of children) {\n          this._getDescendants(descendants, child);\n        }\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\n\n\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nclass CdkTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n\nCdkTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TREE_NODE_OUTLET_NODE]\n  }, {\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Context provided to the tree node component. */\n\n\nclass CdkTreeNodeOutletContext {\n  constructor(data) {\n    this.$implicit = data;\n  }\n\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nclass CdkTreeNodeDef {\n  /** @docs-private */\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n\nCdkTreeNodeDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n\n\nclass CdkTree {\n  constructor(_differs, _changeDetectorRef) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    /** Level of nodes */\n\n    this._levels = new Map(); // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n\n\n  get dataSource() {\n    return this._dataSource;\n  }\n\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n    if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this.viewChange.complete();\n\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  } // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n\n\n  _switchDataSource(dataSource) {\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n\n      this._dataSubscription = null;\n    } // Remove the all dataNodes if there is now no data source\n\n\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n  /** Set up a subscription for the data provided by the data source. */\n\n\n  _observeRenderChanges() {\n    let dataStream;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n\n\n  renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n    const changes = dataDiffer.diff(data);\n\n    if (!changes) {\n      return;\n    }\n\n    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n      if (item.previousIndex == null) {\n        this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n      } else if (currentIndex == null) {\n        viewContainer.remove(adjustedPreviousIndex);\n\n        this._levels.delete(item.item);\n      } else {\n        const view = viewContainer.get(adjustedPreviousIndex);\n        viewContainer.move(view, currentIndex);\n      }\n    });\n\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n\n\n  _getNodeDef(data, i) {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first;\n    }\n\n    const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n\n    return nodeDef;\n  }\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n\n\n  insertNode(nodeData, index, viewContainer, parentData) {\n    const node = this._getNodeDef(nodeData, index); // Node context that will be provided to created embedded view\n\n\n    const context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData) + 1;\n    } else {\n      context.level = 0;\n    }\n\n    this._levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet\n\n\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n\n}\n\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkTreeNodeOutlet],\n  encapsulation: 2\n});\n\nCdkTree.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}];\n\nCdkTree.propDecorators = {\n  dataSource: [{\n    type: Input\n  }],\n  treeControl: [{\n    type: Input\n  }],\n  trackBy: [{\n    type: Input\n  }],\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [CdkTreeNodeOutlet, {\n      static: true\n    }]\n  }],\n  _nodeDefs: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeDef, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n      // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet, {\n        static: true\n      }]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n\n\nclass CdkTreeNode {\n  constructor(_elementRef, _tree) {\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** Emits when the node's data has changed. */\n\n    this._dataChanges = new Subject();\n    CdkTreeNode.mostRecentTreeNode = this; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    this._elementRef.nativeElement.classList.add('cdk-tree-node');\n\n    this.role = 'treeitem';\n  }\n  /**\n   * The role of the tree node.\n   * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n   *   removed in a future version.\n   * @breaking-change 12.0.0 Remove this input\n   */\n\n\n  get role() {\n    return 'treeitem';\n  }\n\n  set role(_role) {\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.setAttribute('role', _role);\n  }\n  /** The tree node's data. */\n\n\n  get data() {\n    return this._data;\n  }\n\n  set data(value) {\n    if (value !== this._data) {\n      this._data = value;\n\n      this._setRoleFromData();\n\n      this._dataChanges.next();\n    }\n  }\n\n  get isExpanded() {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  _setExpanded(_expanded) {\n    this._isAriaExpanded = _expanded;\n\n    this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n  }\n\n  get level() {\n    // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n    // aria-level off the parent node and use it as the level for this node (note aria-level is\n    // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n  }\n\n  ngOnInit() {\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n\n    this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n  }\n\n  ngDoCheck() {\n    // aria-expanded is be set here because the expanded state is stored in the tree control and\n    // the node isn't aware when the state is changed.\n    // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n    // TODO: move to host after View Engine deprecation\n    if (this.isExpanded != this._isAriaExpanded) {\n      this._setExpanded(this.isExpanded);\n    }\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._dataChanges.complete();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Focuses the menu item. Implements for FocusableOption. */\n\n\n  focus() {\n    this._elementRef.nativeElement.focus();\n  } // TODO: role should eventually just be set in the component host\n\n\n  _setRoleFromData() {\n    if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n\n    this.role = 'treeitem';\n  }\n\n}\n\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n};\n\nCdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\n\nCdkTreeNode.mostRecentTreeNode = null;\n\nCdkTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}];\n\nCdkTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction getParentNodeAriaLevel(nodeElement) {\n  let parent = nodeElement.parentElement;\n\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element) {\n  const classList = element.classList;\n  return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n\n\nclass CdkNestedTreeNode extends CdkTreeNode {\n  constructor(_elementRef, _tree, _differs) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    this._elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n    if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes);\n    } else if (isObservable(childrenNodes)) {\n      childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n    }\n\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._clear();\n\n    super.ngOnDestroy();\n  }\n  /** Add children dataNodes to the NodeOutlet */\n\n\n  updateChildrenNodes(children) {\n    const outlet = this._getNodeOutlet();\n\n    if (children) {\n      this._children = children;\n    }\n\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Clear the children dataNodes. */\n\n\n  _clear() {\n    const outlet = this._getNodeOutlet();\n\n    if (outlet) {\n      outlet.viewContainer.clear();\n\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Gets the outlet for the current node. */\n\n\n  _getNodeOutlet() {\n    const outlets = this.nodeOutlet; // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n\n}\n\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: CdkNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nCdkNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}];\n\nCdkNestedTreeNode.propDecorators = {\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [CdkTreeNodeOutlet, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: CdkNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Regex used to split a string on its CSS units. */\n\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n\nclass CdkTreeNodePadding {\n  constructor(_treeNode, _tree, _element, _dir) {\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._element = _element;\n    this._dir = _dir;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** CSS units used for the indentation value. */\n\n    this.indentUnits = 'px';\n    this._indent = 40;\n\n    this._setPadding();\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    } // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n\n\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n\n\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n\n\n  _paddingIndent() {\n    const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n\n\n  _setLevelInput(value) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = coerceNumberProperty(value, null);\n\n    this._setPadding();\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n\n\n  _setIndentInput(indent) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n\n    this._setPadding();\n  }\n\n}\n\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n\nCdkTreeNodePadding.ctorParameters = () => [{\n  type: CdkTreeNode\n}, {\n  type: CdkTree\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nCdkTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['cdkTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['cdkTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Node toggle to expand/collapse the node.\n */\n\n\nclass CdkTreeNodeToggle {\n  constructor(_tree, _treeNode) {\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /** Whether expand/collapse the node recursively. */\n\n\n  get recursive() {\n    return this._recursive;\n  }\n\n  set recursive(value) {\n    this._recursive = coerceBooleanProperty(value);\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _toggle(event) {\n    this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n    event.stopPropagation();\n  }\n\n}\n\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n};\n\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n\nCdkTreeNodeToggle.ctorParameters = () => [{\n  type: CdkTree\n}, {\n  type: CdkTreeNode\n}];\n\nCdkTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['cdkTreeNodeToggleRecursive']\n  }],\n  _toggle: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\n\nclass CdkTreeModule {}\n\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\n\nCdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet],\n    exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };","map":{"version":3,"names":["SelectionModel","isDataSource","isObservable","Subject","BehaviorSubject","of","take","filter","takeUntil","InjectionToken","Directive","ViewContainerRef","Inject","Optional","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","IterableDiffers","ChangeDetectorRef","Input","ViewChild","ContentChildren","ElementRef","HostListener","NgModule","coerceNumberProperty","coerceBooleanProperty","Directionality","ɵngcc0","ɵngcc1","BaseTreeControl","constructor","expansionModel","toggle","dataNode","_trackByValue","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","getDescendants","map","value","trackBy","FlatTreeControl","getLevel","isExpandable","options","startIndex","dataNodes","indexOf","results","i","length","expandAll","node","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","dataSource","_dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","create","treeControl","ngOnDestroy","_nodeOutlet","complete","next","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","dependencies","encapsulation","propDecorators","static","host","None","changeDetection","Default","_elementRef","_tree","_destroyed","_dataChanges","nativeElement","classList","add","role","_role","setAttribute","_data","_setRoleFromData","_setExpanded","_expanded","_isAriaExpanded","_parentNodeAriaLevel","getParentNodeAriaLevel","ngDoCheck","focus","CdkTreeNode_Factory","nodeElement","parent","parentElement","isNodeElement","contains","getAttribute","element","CdkNestedTreeNode","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","disabled","tabIndex","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_element","_dir","indentUnits","_indent","_setPadding","change","_level","_setLevelInput","indent","_setIndentInput","_paddingIndent","nodeLevel","forceChange","padding","_currentPadding","paddingProp","resetProp","style","units","parts","split","CdkTreeNodePadding_Factory","CdkTreeNodeToggle","_recursive","recursive","_toggle","event","stopPropagation","CdkTreeNodeToggle_Factory","hostBindings","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ytp-user-003/Documents/Backup/kohab/kohabbb/kohab-web-ui/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js"],"sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() { return this._dataSource; }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkTreeNodeOutlet], encapsulation: 2 });\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() { return 'treeitem'; }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() { return this._data; }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ?\n            this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() { return this._recursive; }\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}